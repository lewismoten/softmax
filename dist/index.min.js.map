{"version":3,"sources":["index.js"],"names":["id","dependencyNames","instantiate","getThis","key","this","isCommonJs","module","exports","isAmd","define","amd","that","dependencies","map","require","apply","result","call","arguments","_dependencies","softmax","values","checkValue","length","exponents","Math","exp","total","reduce","sum","divide","augend","addend","dividend","value","invalidArgumentMessage","Infinity","Number","MAX_VALUE","JSON","stringify"],"mappings":"CASA,SAAyBA,EAAIC,EAAiBC,GAE5C,YA4BA,SAASC,GAAQC,GAEf,MAAOC,MAAKD,GAQd,QAASE,KAEP,MAAyB,mBAAXC,SAAoD,mBAAnBA,QAAOC,QAQxD,QAASC,KAEP,MAAyB,kBAAXC,SAAyBA,OAAOC,IAhDhD,GAAIC,GAAOP,IAEX,IAAIC,IAAc,CAEhB,GAAIO,GAAeZ,EAAgBa,IAAIC,QACvCP,SAAUD,OAAOC,QAAUI,EAAKZ,GAAME,EAAYc,MAAM,KAAMH,OACzD,IAAIJ,IAETC,OAAOV,EAAIC,EAAiB,WAE1B,GAAIgB,GAASL,EAAKZ,GAAME,EAAYgB,KAAK,KAAMC,UAC/C,OAAOF,SAEJ,CAEL,GAAIG,GAAgBnB,EAAgBa,IAAIX,EAASS,EACjDA,GAAKZ,GAAME,EAAYc,MAAM,KAAMI,MAkCpCF,KAAKb,SAAY,aAAe,WAEjC,YAUA,SAASgB,GAAQC,GAIf,GAFAA,EAAOR,IAAIS,GAEW,IAAlBD,EAAOE,OAET,OAAQ,EAGV,IAAIC,GAAYH,EAAOR,IAAIY,KAAKC,KAC5BC,EAAQH,EAAUI,OAAOC,EAAK,EAElC,OAAOL,GAAUX,IAAIiB,EAAQH,GAS/B,QAASE,GAAIE,EAAQC,GAEnB,MAAOD,GAASC,EASlB,QAASF,GAAOG,GAEd,MAAOA,GAAW7B,KASpB,QAASkB,GAAWY,GAElB,GAAqB,gBAAVA,GAET,KAAMC,GAAuBD,EAG/B,QAAQA,GAEN,IAAKE,GAAAA,EACL,MAAMA,EAAAA,GACN,IAAKC,QAAOC,UACZ,KAAMD,OAAOC,UACX,KAAMH,GAAuBD,IAYnC,QAASC,GAAuBD,GAE9B,MAAO,+BAAiCK,KAAKC,UAAUN,GA9EzD,MAAOd","file":"index.min.js","sourcesContent":["\n/**\r\n * Register a module for CommonJS, AMD, and the global namespace.\r\n *\r\n * @param  {string} id                  The identity of the module\r\n * @param  {string[]} dependencyNames   List of dependency names\r\n * @param  {function} instantiate       Factory method to get the module\r\n * @return {undefined}\r\n */\n(function registerModule(id, dependencyNames, instantiate) {\n\n  'use strict';\n\n  var that = this;\n\n  if (isCommonJs()) {\n\n    var dependencies = dependencyNames.map(require);\n    exports = module.exports = that[id] = instantiate.apply(null, dependencies);\n  } else if (isAmd()) {\n\n    define(id, dependencyNames, function factory() {\n\n      var result = that[id] = instantiate.call(null, arguments);\n      return result;\n    });\n  } else {\n\n    var _dependencies = dependencyNames.map(getThis, that);\n    that[id] = instantiate.apply(null, _dependencies);\n  }\n\n  /**\r\n   * Get the value of an objects key\r\n   *\r\n   ** @this {object}        The source\r\n   * @param  {string} key   The key\r\n   * @return {*}            The objects key value\r\n   */\n  function getThis(key) {\n\n    return this[key];\n  }\n\n  /**\r\n   * Determines if the environment appears to be CommonJS\r\n   *\r\n   * @return {boolean} True if environment is CommonJS, otherwise false\r\n   */\n  function isCommonJs() {\n\n    return typeof module !== 'undefined' && typeof module.exports !== 'undefined';\n  }\n\n  /**\r\n   * Determines if the environment supports Asynchronous module definition (AMD)\r\n   *\r\n   * @return {boolean} True if environment supports AMD, otherwise false\r\n   */\n  function isAmd() {\n\n    return typeof define === 'function' && define.amd;\n  }\n}).call(this || {}, 'softmax', [], function instantiate() {\n\n  'use strict';\n\n  return softmax;\n\n  /**\r\n  * Softmax\r\n  * @param {number[]} values  A list of numbers ranging from -10 to 10\r\n  * @return {number[]}        The normalized list of entries between 0 and 1\r\n  *                           where the sum is 1.\r\n  */\n  function softmax(values) {\n\n    values.map(checkValue);\n\n    if (values.length === 1) {\n\n      return [1];\n    }\n\n    var exponents = values.map(Math.exp),\n        total = exponents.reduce(sum, 0);\n\n    return exponents.map(divide, total);\n  }\n\n  /**\r\n  * Sum\r\n  * @param {number} augend  The number to whcih an addend is added.\r\n  * @param {number} addend  A number that is added to another.\r\n  * @returns {number}       The sum\r\n  */\n  function sum(augend, addend) {\n\n    return augend + addend;\n  }\n\n  /**\r\n  * Divide\r\n  ** @this {number}           The divisor\r\n  * @param {number} dividend  The number to be divided\r\n  * @returns {number}         The quotient\r\n  */\n  function divide(dividend) {\n\n    return dividend / this;\n  }\n\n  /**\r\n  * Checks the value to determine if it is valid\r\n  * @param {*} value                  The value\r\n  * @throws {invalidArgumentMessage}  The value must be a number in-range\r\n  * @returns {undefined}\r\n  */\n  function checkValue(value) {\n\n    if (typeof value !== 'number') {\n\n      throw invalidArgumentMessage(value);\n    }\n\n    switch (value) {\n\n      case Infinity:\n      case -Infinity:\n      case Number.MAX_VALUE:\n      case -Number.MAX_VALUE:\n        throw invalidArgumentMessage(value);\n\n      default:\n\n    }\n  }\n\n  /**\r\n  * An invalid argument message\r\n  * @param {*} value    The value of the argument\r\n  * @returns {string}   The message indicating that the value is invalid.\r\n  */\n  function invalidArgumentMessage(value) {\n\n    return 'Invalid argument specified: ' + JSON.stringify(value);\n  }\n});\n//# sourceMappingURL=index.js.map\n"]}